package ru.vsu.cs;

import javax.swing.*;

import ru.vsu.cs.functions.*;
import ru.vsu.cs.models.HelixFunc;
import ru.vsu.cs.draw.DrawPanel;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class MainGUI extends JFrame {
    private JPanel mainPanel;
    private JPanel secondPanel;
    private DrawPanel drawPanel;
    private JSpinner turnsSpinner;
    private JComboBox stepFunc;
    private JSpinner countOfPointsSpinner;
    private JSpinner stepSpinner;
    private JSpinner thicknessSpinner;
    private JButton createHelixButton;

    public MainGUI() {
        $$$setupUI$$$();
        setContentPane(mainPanel);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setVisible(true);
        setSize(1000, 800);

        stepSpinner.setModel(new SpinnerNumberModel(0.1f, 0.01f, 2, 0.01f));
        countOfPointsSpinner.setModel(new SpinnerNumberModel(6, 6, 180, 6));
        thicknessSpinner.setModel(new SpinnerNumberModel(0.5f, 0.01f, 1, 0.01f));
        turnsSpinner.setModel(new SpinnerNumberModel(3, 1, 50, 1));


        stepFunc.addItem(AnyIFunction.DEFAULT);
        stepFunc.addItem(AnyIFunction.SINUS);
        stepFunc.addItem(AnyIFunction.COSINUS);
        stepFunc.addItem(AnyIFunction.EXPONENT);
        stepFunc.addItem(AnyIFunction.SQRT);
        stepFunc.addItem(AnyIFunction.ATAN);
        try {
            createHelixButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    IFunction fStep = null;

                    switch ((AnyIFunction) stepFunc.getSelectedItem()) {
                        case SINUS: {
                            fStep = new SinusFunction();
                            break;
                        }
                        case COSINUS: {
                            fStep = new CosinusFunction();
                            break;
                        }
                        case EXPONENT: {
                            fStep = new ExpFunction();
                            break;
                        }
                        case SQRT: {
                            fStep = new SqrtFunction();
                            break;
                        }
                        case ATAN: {
                            fStep = new AtanFunction();
                            break;
                        }
                        case DEFAULT: {
                            fStep = new DefaultFunction();
                            break;
                        }
                    }

                    int countOfTurns = (int) turnsSpinner.getValue();
                    int countOfPointsPerTurn = (int) countOfPointsSpinner.getValue();
                    float step = (float) (double) stepSpinner.getValue();
                    float thickness = (float) (double) thicknessSpinner.getValue();
                    int countOfPointsPerTick = (int) countOfPointsSpinner.getValue();

                    drawPanel.setHelix(new HelixFunc(countOfTurns, countOfPointsPerTurn,
                            step, thickness, countOfPointsPerTick, fStep));
                    drawPanel.repaint();

                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void createUIComponents() {
        drawPanel = new DrawPanel();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        secondPanel = new JPanel();
        secondPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(10, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(secondPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        secondPanel.add(drawPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 4, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(100, 100), new Dimension(800, 800), new Dimension(2000, 2000), 0, false));
        turnsSpinner = new JSpinner();
        secondPanel.add(turnsSpinner, new com.intellij.uiDesigner.core.GridConstraints(5, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        stepFunc = new JComboBox();
        secondPanel.add(stepFunc, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        countOfPointsSpinner = new JSpinner();
        secondPanel.add(countOfPointsSpinner, new com.intellij.uiDesigner.core.GridConstraints(9, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        stepSpinner = new JSpinner();
        secondPanel.add(stepSpinner, new com.intellij.uiDesigner.core.GridConstraints(7, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        thicknessSpinner = new JSpinner();
        secondPanel.add(thicknessSpinner, new com.intellij.uiDesigner.core.GridConstraints(7, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Кол-во витков");
        secondPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Толщина");
        secondPanel.add(label2, new com.intellij.uiDesigner.core.GridConstraints(6, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Кол-во точек");
        secondPanel.add(label3, new com.intellij.uiDesigner.core.GridConstraints(8, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Расстояние между витками");
        secondPanel.add(label5, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("Ф-ция витков");
        secondPanel.add(label6, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
